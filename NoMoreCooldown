-- LocalScript

local player = game.Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "MiScreenGui"
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true
screenGui.Parent = playerGui

-- ScrollingFrame
local frame = Instance.new("ScrollingFrame")
frame.Name = "MiFrame"
frame.Size = UDim2.new(0.18, 0, 0.30, 0)
frame.Position = UDim2.new(0.776, 0, 0.042, 0)
frame.BackgroundColor3 = Color3.fromRGB(0,0,0)
frame.BorderColor3 = Color3.fromRGB(161,0,0)
frame.BorderSizePixel = 2
frame.ScrollBarThickness = 8
frame.ClipsDescendants = true
frame.AutomaticCanvasSize = Enum.AutomaticSize.Y
frame.Parent = screenGui
frame.Visible = true

-- UIListLayout
local listLayout = Instance.new("UIListLayout")
listLayout.Parent = frame
listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
listLayout.SortOrder = Enum.SortOrder.LayoutOrder
listLayout.Padding = UDim.new(0,5)

-- Función para crear botones
local function crearBoton(nombre, parent, borderColor)
    local btn = Instance.new("TextButton")
    btn.Name = nombre
    btn.Size = UDim2.new(0,133,0,25)
    btn.BackgroundColor3 = Color3.fromRGB(0,0,0)
    btn.BorderColor3 = borderColor
    btn.BorderSizePixel = 2
    btn.Text = nombre
    btn.TextColor3 = Color3.fromRGB(255,255,255)
    btn.TextScaled = true
    btn.Parent = parent
    btn.Visible = true
    return btn
end

-- Función para activar habilidades
local function activarHabilidad(nombre)
    local abilityGui = player:WaitForChild("PlayerGui"):WaitForChild("AbilitysGui")
    local abilityFrame = abilityGui:WaitForChild("AbilityFrame")
    local habilidad = abilityFrame:WaitForChild(nombre)
    local config = habilidad:WaitForChild("Configuration")
    local cooldown = config:WaitForChild("CoolDown")
    cooldown.Value = 0
end

-- Lista de botones principales
local nombresBotones = {
    "Sonic","Cream","Vanilla","Eggman","Bendy","Boris",
    "Cuphead","Mugman","Monika","Sayori","Sans","Frisk",
    "Vortex","Yuri","Chara","GlobalMinion"
}

local botonesPrincipales = {}
local layoutIndex = 1

for _, nombre in ipairs(nombresBotones) do
    local btn = crearBoton(nombre, frame, Color3.fromRGB(139,0,0))
    btn.LayoutOrder = layoutIndex
    layoutIndex += 1
    botonesPrincipales[nombre] = btn
end

-- Definición de sub-botones
local habilidades = {
    Sonic   = {"SpeedBoost","SpinDash","Spring"},
    Cream   = {"DropDash","Glide","JumpBoost"},
    Vanilla = {"Counter","Grab","Rush"},
    Eggman  = {"Flamethrower","Jetpack","MineTrap"},
    Bendy   = {"InkPuddle","InkFlow","InkWave"},
    Boris   = {"AxeAttack","AxeBlock","AxeThrow"},
    Cuphead = {"Dash","Parry","SuperArt"},
    Mugman  = {"EXShot","PeaShooter","SuperArt1"},
    Monika  = {"Glitch","WritePoem","Manipulate"},
    Sayori  = {"HEAL","CHEER","SCREAM"},
    Sans    = {"GasterBlaster","Teleport","BoneBarrier"},
    Frisk   = {"Stick","SeaTea","Pull","Act"},
    Vortex  = {"Attack","Invisiblity","Jump","Laugh","Rage"},
    Yuri    = {"Frenzy","Indicator","KnifeAttack","KnifeDash","Laugh"},
    Chara   = {"CharaAttack","Save","SaveThrow","Slash"},
    GlobalMinion = {"Attack"}
}

-- Crear todos los sub-botones
local subBotones = {}
for personaje, lista in pairs(habilidades) do
    subBotones[personaje] = {}
    for _, habilidad in ipairs(lista) do
        local btn = crearBoton(habilidad, frame, Color3.fromRGB(180,180,180))
        btn.Visible = false
        subBotones[personaje][habilidad] = btn
        -- Conectar habilidad
        btn.MouseButton1Click:Connect(function()
            activarHabilidad(habilidad)
        end)
    end
end

-- Actualizar LayoutOrder dinámicamente
local function actualizarLayout()
    local index = 1
    for _, nombre in ipairs(nombresBotones) do
        local btn = botonesPrincipales[nombre]
        btn.LayoutOrder = index
        index += 1
        if subBotones[nombre] then
            for _, subNombre in ipairs(habilidades[nombre]) do
                if subBotones[nombre][subNombre].Visible then
                    subBotones[nombre][subNombre].LayoutOrder = index
                    index += 1
                end
            end
        end
    end
end

-- Toggle sub-botones
local abiertos = {}
for personaje, lista in pairs(habilidades) do
    abiertos[personaje] = false
    botonesPrincipales[personaje].MouseButton1Click:Connect(function()
        abiertos[personaje] = not abiertos[personaje]
        for _, habilidad in ipairs(lista) do
            subBotones[personaje][habilidad].Visible = abiertos[personaje]
        end
        actualizarLayout()
    end)
end

-- Botón "-" movible
local button1 = Instance.new("TextButton")
button1.Name = "Button1"
button1.Size = UDim2.new(0, 40, 0, 30)
button1.Position = UDim2.new(0.776,0,0.346,0)
button1.AnchorPoint = Vector2.new(0.5,0.5)
button1.BackgroundColor3 = Color3.fromRGB(0,0,0)
button1.BorderColor3 = Color3.fromRGB(139,0,0)
button1.BorderSizePixel = 2
button1.Text = "-"
button1.TextColor3 = Color3.fromRGB(255,255,255)
button1.TextScaled = true
button1.Parent = screenGui

local isOpen = true
button1.MouseButton1Click:Connect(function()
    frame.Visible = not isOpen
    button1.Text = isOpen and "+" or "-"
    isOpen = not isOpen
end)

-- Hacer el botón "-" movible en PC y móviles
local UIS = game:GetService("UserInputService")
local dragging = false
local dragInput
local dragStart
local startPos

local function update(input)
    local delta = input.Position - dragStart
    button1.Position = UDim2.new(
        startPos.X.Scale,
        startPos.X.Offset + delta.X,
        startPos.Y.Scale,
        startPos.Y.Offset + delta.Y
    )
end

button1.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = button1.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

button1.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UIS.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)
