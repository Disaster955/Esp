local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local AbilityFramePath = LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("AbilitysGui"):WaitForChild("AbilityFrame")

local savedCooldowns = {}
local ui = { CharacterDropdown = nil, AbilityDropdown = nil, ResetButton = nil }
local currentCharacter = nil

-- Función para escanear habilidades y llenar el dropdown
local function updateAbilities()
    if not ui.AbilityDropdown then return end

    local options = {}
    for _, ability in ipairs(AbilityFramePath:GetChildren()) do
        local config = ability:FindFirstChild("Configuration")
        if config and config:FindFirstChild("CoolDown") then
            table.insert(options, ability.Name)

            -- Guardar el cooldown original una sola vez (no sobrescribir si ya existe)
            if not savedCooldowns[ability.Name] and config.CoolDown.Value ~= 0 then
                savedCooldowns[ability.Name] = config.CoolDown.Value
            end
        end
    end

    -- Actualizar el dropdown con las habilidades disponibles
    ui.AbilityDropdown:Set({Options = options})
end

-- Selección de personaje
local function selectCharacter(name)
    local charFolder = workspace:WaitForChild(LocalPlayer.Name):WaitForChild("CharacterFolder")
    local charName = charFolder:WaitForChild("CharacterName")

    if charName.Value == name then
        currentCharacter = name
        updateAbilities()

        -- Escuchar cambios en AbilityFrame
        AbilityFramePath.ChildAdded:Connect(updateAbilities)
        AbilityFramePath.ChildRemoved:Connect(function(child)
            savedCooldowns[child.Name] = nil
            updateAbilities()
        end)
    else
        currentCharacter = nil
        ui.AbilityDropdown:Set({Options = {}})
    end
end

-- Selección de habilidad (pone cooldown = 0)
local function selectAbility(abilityName)
    local ability = AbilityFramePath:FindFirstChild(abilityName)
    if ability then
        local config = ability:FindFirstChild("Configuration")
        if config and config:FindFirstChild("CoolDown") then
            config.CoolDown.Value = 0
        end
    end
end

-- Resetear todos los cooldowns a sus valores originales
local function resetCooldowns()
    for abilityName, value in pairs(savedCooldowns) do
        local ability = AbilityFramePath:FindFirstChild(abilityName)
        if ability then
            local config = ability:FindFirstChild("Configuration")
            if config and config:FindFirstChild("CoolDown") then
                config.CoolDown.Value = value
            end
        end
    end
end

-- Conectar UI desde Rayfield
local function bindUI(charDropdown, abilityDropdown, resetBtn)
    ui.CharacterDropdown = charDropdown
    ui.AbilityDropdown = abilityDropdown
    ui.ResetButton = resetBtn
end

return {
    BindUI = bindUI,
    SelectCharacter = selectCharacter,
    SelectAbility = selectAbility,
    ResetCooldowns = resetCooldowns,
}
